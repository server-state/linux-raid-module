/* eslint-disable no-unused-vars */
/* eslint-disable no-control-regex */
module.exports = /*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function() {
    'use strict';

    function peg$subclass(child, parent) {
        function ctor() { this.constructor = child; }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
    }

    function peg$SyntaxError(message, expected, found, location) {
        this.message  = message;
        this.expected = expected;
        this.found    = found;
        this.location = location;
        this.name     = 'SyntaxError';

        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, peg$SyntaxError);
        }
    }

    peg$subclass(peg$SyntaxError, Error);

    peg$SyntaxError.buildMessage = function(expected, found) {
        var DESCRIBE_EXPECTATION_FNS = {
            literal: function(expectation) {
                return '"' + literalEscape(expectation.text) + '"';
            },

            'class': function(expectation) {
                var escapedParts = '',
                    i;

                for (i = 0; i < expectation.parts.length; i++) {
                    escapedParts += expectation.parts[i] instanceof Array
                        ? classEscape(expectation.parts[i][0]) + '-' + classEscape(expectation.parts[i][1])
                        : classEscape(expectation.parts[i]);
                }

                return '[' + (expectation.inverted ? '^' : '') + escapedParts + ']';
            },

            any: function(expectation) {
                return 'any character';
            },

            end: function(expectation) {
                return 'end of input';
            },

            other: function(expectation) {
                return expectation.description;
            }
        };

        function hex(ch) {
            return ch.charCodeAt(0).toString(16).toUpperCase();
        }

        function literalEscape(s) {
            return s
                .replace(/\\/g, '\\\\')
                .replace(/"/g,  '\\"')
                .replace(/\0/g, '\\0')
                .replace(/\t/g, '\\t')
                .replace(/\n/g, '\\n')
                .replace(/\r/g, '\\r')
                .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
                .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
        }

        function classEscape(s) {
            return s
                .replace(/\\/g, '\\\\')
                .replace(/\]/g, '\\]')
                .replace(/\^/g, '\\^')
                .replace(/-/g,  '\\-')
                .replace(/\0/g, '\\0')
                .replace(/\t/g, '\\t')
                .replace(/\n/g, '\\n')
                .replace(/\r/g, '\\r')
                .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
                .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
        }

        function describeExpectation(expectation) {
            return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
        }

        function describeExpected(expected) {
            var descriptions = new Array(expected.length),
                i, j;

            for (i = 0; i < expected.length; i++) {
                descriptions[i] = describeExpectation(expected[i]);
            }

            descriptions.sort();

            if (descriptions.length > 0) {
                for (i = 1, j = 1; i < descriptions.length; i++) {
                    if (descriptions[i - 1] !== descriptions[i]) {
                        descriptions[j] = descriptions[i];
                        j++;
                    }
                }
                descriptions.length = j;
            }

            switch (descriptions.length) {
            case 1:
                return descriptions[0];

            case 2:
                return descriptions[0] + ' or ' + descriptions[1];

            default:
                return descriptions.slice(0, -1).join(', ')
            + ', or '
            + descriptions[descriptions.length - 1];
            }
        }

        function describeFound(found) {
            return found ? '"' + literalEscape(found) + '"' : 'end of input';
        }

        return 'Expected ' + describeExpected(expected) + ' but ' + describeFound(found) + ' found.';
    };

    function peg$parse(input, options) {
        options = options !== void 0 ? options : {};

        var peg$FAILED = {},

            peg$startRuleFunctions = { start: peg$parsestart },
            peg$startRuleFunction  = peg$parsestart,

            peg$c0 = function(personalities, raids) {
                return {
                    'personalities': personalities,
                    'raids': raids
                };
            },
            peg$c1 = 'Personalities : ',
            peg$c2 = peg$literalExpectation('Personalities : ', false),
            peg$c3 = '[',
            peg$c4 = peg$literalExpectation('[', false),
            peg$c5 = '] ',
            peg$c6 = peg$literalExpectation('] ', false),
            peg$c7 = function(raidType) { return raidType; },
            peg$c8 = '\n',
            peg$c9 = peg$literalExpectation('\n', false),
            peg$c10 = function(personalities) {
                return personalities;
            },
            peg$c11 = function(firstLine, secondLine, option) { return option; },
            peg$c12 = function(firstLine, secondLine, options) {
                return concatObjects(firstLine, secondLine, {'options': options});
            },
            peg$c13 = ' : ',
            peg$c14 = peg$literalExpectation(' : ', false),
            peg$c15 = ' ',
            peg$c16 = peg$literalExpectation(' ', false),
            peg$c17 = function(name, state, access) { return access; },
            peg$c18 = function(name, state, access, type) { return type; },
            peg$c19 = function(name, state, access, type, device) { return device; },
            peg$c20 = function(name, state, access, type, devices) {
                return {
                    'name': name,
                    'state': state,
                    'access': (access ? access : 'rw'),
                    'type': type,
                    'devices': devices
                };
            },
            peg$c21 = 'active',
            peg$c22 = peg$literalExpectation('active', false),
            peg$c23 = 'inactive',
            peg$c24 = peg$literalExpectation('inactive', false),
            peg$c25 = '(auto-read-only)',
            peg$c26 = peg$literalExpectation('(auto-read-only)', false),
            peg$c27 = function() {
                return 'ro';
            },
            peg$c28 = ']',
            peg$c29 = peg$literalExpectation(']', false),
            peg$c30 = function(name, index, status) {        
                return {
                    'name': name,
                    'index': index,
                    'status': status
                };
            },
            peg$c31 = '(',
            peg$c32 = peg$literalExpectation('(', false),
            peg$c33 = ')',
            peg$c34 = peg$literalExpectation(')', false),
            peg$c35 = function(identifier) { return identifier; },
            peg$c36 = function(status) {
                switch (status) {
                case 'F':
                    return 'failed';
                case 'R':
                    return 'rescue';
                case 'S':
                    return 'spare';
                default:
                    return 'active';
                }
            },
            peg$c37 = 'F',
            peg$c38 = peg$literalExpectation('F', false),
            peg$c39 = 'S',
            peg$c40 = peg$literalExpectation('S', false),
            peg$c41 = 'R',
            peg$c42 = peg$literalExpectation('R', false),
            peg$c43 = ' blocks ',
            peg$c44 = peg$literalExpectation(' blocks ', false),
            peg$c45 = /^[0-9a-z, .]/i,
            peg$c46 = peg$classExpectation([['0', '9'], ['a', 'z'], ',', ' ', '.'], false, true),
            peg$c47 = function(blocks, parameters, devicePosition) {
                return concatObjects(
                    {
                        'blocks': blocks,
                        'parameters': parameters.trim()
                    },
                    devicePosition
                );
            },
            peg$c48 = '/',
            peg$c49 = peg$literalExpectation('/', false),
            peg$c50 = '] [',
            peg$c51 = peg$literalExpectation('] [', false),
            peg$c52 = /^[_,U]/,
            peg$c53 = peg$classExpectation(['_', ',', 'U'], false, false),
            peg$c54 = function(ideal, current) {
                return {
                    'ideal': ideal,
                    'current': current
                };
            },
            peg$c55 = 'bitmap: ',
            peg$c56 = peg$literalExpectation('bitmap: ', false),
            peg$c57 = ' pages [',
            peg$c58 = peg$literalExpectation(' pages [', false),
            peg$c59 = 'KB], ',
            peg$c60 = peg$literalExpectation('KB], ', false),
            peg$c61 = 'KB chunk',
            peg$c62 = peg$literalExpectation('KB chunk', false),
            peg$c63 = function(usedPages, totalPages, sizePages, chunkSize) {
                return {
                    'type': 'bitmap',
                    'usedPages': usedPages,
                    'totalPages': totalPages,
                    'sizePages': sizePages,
                    'chunkSize': chunkSize
                };
            },
            peg$c64 = /^[=]/,
            peg$c65 = peg$classExpectation(['='], false, false),
            peg$c66 = /^[>]/,
            peg$c67 = peg$classExpectation(['>'], false, false),
            peg$c68 = /^[.]/,
            peg$c69 = peg$classExpectation(['.'], false, false),
            peg$c70 = ']  ',
            peg$c71 = peg$literalExpectation(']  ', false),
            peg$c72 = ' =',
            peg$c73 = peg$literalExpectation(' =', false),
            peg$c74 = '% ',
            peg$c75 = peg$literalExpectation('% ', false),
            peg$c76 = ') ',
            peg$c77 = peg$literalExpectation(') ', false),
            peg$c78 = 'finish=',
            peg$c79 = peg$literalExpectation('finish=', false),
            peg$c80 = 'min ',
            peg$c81 = peg$literalExpectation('min ', false),
            peg$c82 = 'speed=',
            peg$c83 = peg$literalExpectation('speed=', false),
            peg$c84 = 'K/sec',
            peg$c85 = peg$literalExpectation('K/sec', false),
            peg$c86 = function(activityType, progress, processed, total, finish, speed) {
                return {
                    'type': 'activity',
                    'activityType': activityType,
                    'progress': progress,
                    'processed': processed,
                    'total': total,
                    'finish': finish,
                    'speed': speed
                };
            },
            peg$c87 = 'recovery',
            peg$c88 = peg$literalExpectation('recovery', false),
            peg$c89 = 'resync',
            peg$c90 = peg$literalExpectation('resync', false),
            peg$c91 = /^[^\n]/,
            peg$c92 = peg$classExpectation(['\n'], true, false),
            peg$c93 = function(value) {
                return {
                    'type': 'unknown',
                    'value': value
                };
            },
            peg$c94 = 'unused devices: ',
            peg$c95 = peg$literalExpectation('unused devices: ', false),
            peg$c96 = function() {
                return null;
            },
            peg$c97 = peg$otherExpectation('linuxDevice'),
            peg$c98 = 'sd',
            peg$c99 = peg$literalExpectation('sd', false),
            peg$c100 = 'hd',
            peg$c101 = peg$literalExpectation('hd', false),
            peg$c102 = /^[a-z]/,
            peg$c103 = peg$classExpectation([['a', 'z']], false, false),
            peg$c104 = 'sr',
            peg$c105 = peg$literalExpectation('sr', false),
            peg$c106 = 'sg',
            peg$c107 = peg$literalExpectation('sg', false),
            peg$c108 = 'st',
            peg$c109 = peg$literalExpectation('st', false),
            peg$c110 = 'md',
            peg$c111 = peg$literalExpectation('md', false),
            peg$c112 = 'nvme',
            peg$c113 = peg$literalExpectation('nvme', false),
            peg$c114 = 'n',
            peg$c115 = peg$literalExpectation('n', false),
            peg$c116 = 'p',
            peg$c117 = peg$literalExpectation('p', false),
            peg$c118 = 'mmcblk',
            peg$c119 = peg$literalExpectation('mmcblk', false),
            peg$c120 = 'raid',
            peg$c121 = peg$literalExpectation('raid', false),
            peg$c122 = '10',
            peg$c123 = peg$literalExpectation('10', false),
            peg$c124 = '0',
            peg$c125 = peg$literalExpectation('0', false),
            peg$c126 = '1',
            peg$c127 = peg$literalExpectation('1', false),
            peg$c128 = '2',
            peg$c129 = peg$literalExpectation('2', false),
            peg$c130 = '4',
            peg$c131 = peg$literalExpectation('4', false),
            peg$c132 = '5',
            peg$c133 = peg$literalExpectation('5', false),
            peg$c134 = '6',
            peg$c135 = peg$literalExpectation('6', false),
            peg$c136 = 'linear',
            peg$c137 = peg$literalExpectation('linear', false),
            peg$c138 = 'multipath',
            peg$c139 = peg$literalExpectation('multipath', false),
            peg$c140 = peg$otherExpectation('integer'),
            peg$c141 = /^[0-9]/,
            peg$c142 = peg$classExpectation([['0', '9']], false, false),
            peg$c143 = function(digits) {
                return parseInt(digits, 10);
            },
            peg$c144 = peg$otherExpectation('float'),
            peg$c145 = /^[0-9.]/,
            peg$c146 = peg$classExpectation([['0', '9'], '.'], false, false),
            peg$c147 = function(digits) {
                return parseFloat(digits, 10);
            },
            peg$c148 = peg$otherExpectation('whitespace'),
            peg$c149 = /^[ ]/,
            peg$c150 = peg$classExpectation([' '], false, false),
            peg$c151 = function() {
                return null;
            },

            peg$currPos          = 0,
            peg$savedPos         = 0,
            peg$posDetailsCache  = [{ line: 1, column: 1 }],
            peg$maxFailPos       = 0,
            peg$maxFailExpected  = [],
            peg$silentFails      = 0,

            peg$result;

        if ('startRule' in options) {
            if (!(options.startRule in peg$startRuleFunctions)) {
                throw new Error('Can\'t start parsing from rule "' + options.startRule + '".');
            }

            peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
        }

        function text() {
            return input.substring(peg$savedPos, peg$currPos);
        }

        function location() {
            return peg$computeLocation(peg$savedPos, peg$currPos);
        }

        function expected(description, location) {
            location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);

            throw peg$buildStructuredError(
                [peg$otherExpectation(description)],
                input.substring(peg$savedPos, peg$currPos),
                location
            );
        }

        function error(message, location) {
            location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);

            throw peg$buildSimpleError(message, location);
        }

        function peg$literalExpectation(text, ignoreCase) {
            return { type: 'literal', text: text, ignoreCase: ignoreCase };
        }

        function peg$classExpectation(parts, inverted, ignoreCase) {
            return { type: 'class', parts: parts, inverted: inverted, ignoreCase: ignoreCase };
        }

        function peg$anyExpectation() {
            return { type: 'any' };
        }

        function peg$endExpectation() {
            return { type: 'end' };
        }

        function peg$otherExpectation(description) {
            return { type: 'other', description: description };
        }

        function peg$computePosDetails(pos) {
            var details = peg$posDetailsCache[pos], p;

            if (details) {
                return details;
            } else {
                p = pos - 1;
                while (!peg$posDetailsCache[p]) {
                    p--;
                }

                details = peg$posDetailsCache[p];
                details = {
                    line:   details.line,
                    column: details.column
                };

                while (p < pos) {
                    if (input.charCodeAt(p) === 10) {
                        details.line++;
                        details.column = 1;
                    } else {
                        details.column++;
                    }

                    p++;
                }

                peg$posDetailsCache[pos] = details;
                return details;
            }
        }

        function peg$computeLocation(startPos, endPos) {
            var startPosDetails = peg$computePosDetails(startPos),
                endPosDetails   = peg$computePosDetails(endPos);

            return {
                start: {
                    offset: startPos,
                    line:   startPosDetails.line,
                    column: startPosDetails.column
                },
                end: {
                    offset: endPos,
                    line:   endPosDetails.line,
                    column: endPosDetails.column
                }
            };
        }

        function peg$fail(expected) {
            if (peg$currPos < peg$maxFailPos) { return; }

            if (peg$currPos > peg$maxFailPos) {
                peg$maxFailPos = peg$currPos;
                peg$maxFailExpected = [];
            }

            peg$maxFailExpected.push(expected);
        }

        function peg$buildSimpleError(message, location) {
            return new peg$SyntaxError(message, null, null, location);
        }

        function peg$buildStructuredError(expected, found, location) {
            return new peg$SyntaxError(
                peg$SyntaxError.buildMessage(expected, found),
                expected,
                found,
                location
            );
        }

        function peg$parsestart() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            s1 = peg$parsepersonalities();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseraid();
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parseraid();
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseunused();
                    if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c0(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }

            return s0;
        }

        function peg$parsepersonalities() {
            var s0, s1, s2, s3, s4, s5, s6;

            s0 = peg$currPos;
            if (input.substr(peg$currPos, 16) === peg$c1) {
                s1 = peg$c1;
                peg$currPos += 16;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c2); }
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 91) {
                    s4 = peg$c3;
                    peg$currPos++;
                } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c4); }
                }
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseraidType();
                    if (s5 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c5) {
                            s6 = peg$c5;
                            peg$currPos += 2;
                        } else {
                            s6 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c6); }
                        }
                        if (s6 !== peg$FAILED) {
                            peg$savedPos = s3;
                            s4 = peg$c7(s5);
                            s3 = s4;
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 91) {
                        s4 = peg$c3;
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c4); }
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseraidType();
                        if (s5 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c5) {
                                s6 = peg$c5;
                                peg$currPos += 2;
                            } else {
                                s6 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c6); }
                            }
                            if (s6 !== peg$FAILED) {
                                peg$savedPos = s3;
                                s4 = peg$c7(s5);
                                s3 = s4;
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 10) {
                        s3 = peg$c8;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c9); }
                    }
                    if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c10(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }

            return s0;
        }

        function peg$parseraid() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

            s0 = peg$currPos;
            s1 = peg$parsefirstLine();
            if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 10) {
                    s2 = peg$c8;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c9); }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsewhitespace();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsesecondLine();
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 10) {
                                s5 = peg$c8;
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c9); }
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = [];
                                s7 = peg$currPos;
                                s8 = peg$parsewhitespace();
                                if (s8 !== peg$FAILED) {
                                    s9 = peg$parseoptionLine();
                                    if (s9 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 10) {
                                            s10 = peg$c8;
                                            peg$currPos++;
                                        } else {
                                            s10 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c9); }
                                        }
                                        if (s10 !== peg$FAILED) {
                                            peg$savedPos = s7;
                                            s8 = peg$c11(s1, s4, s9);
                                            s7 = s8;
                                        } else {
                                            peg$currPos = s7;
                                            s7 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s7;
                                        s7 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s7;
                                    s7 = peg$FAILED;
                                }
                                while (s7 !== peg$FAILED) {
                                    s6.push(s7);
                                    s7 = peg$currPos;
                                    s8 = peg$parsewhitespace();
                                    if (s8 !== peg$FAILED) {
                                        s9 = peg$parseoptionLine();
                                        if (s9 !== peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 10) {
                                                s10 = peg$c8;
                                                peg$currPos++;
                                            } else {
                                                s10 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c9); }
                                            }
                                            if (s10 !== peg$FAILED) {
                                                peg$savedPos = s7;
                                                s8 = peg$c11(s1, s4, s9);
                                                s7 = s8;
                                            } else {
                                                peg$currPos = s7;
                                                s7 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s7;
                                            s7 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s7;
                                        s7 = peg$FAILED;
                                    }
                                }
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parsewhitespace();
                                    if (s7 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 10) {
                                            s8 = peg$c8;
                                            peg$currPos++;
                                        } else {
                                            s8 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c9); }
                                        }
                                        if (s8 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$c12(s1, s4, s6);
                                            s0 = s1;
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }

            return s0;
        }

        function peg$parsefirstLine() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

            s0 = peg$currPos;
            s1 = peg$parselinuxDevice();
            if (s1 !== peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c13) {
                    s2 = peg$c13;
                    peg$currPos += 3;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c14); }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsestate();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 32) {
                            s5 = peg$c15;
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c16); }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parseaccess();
                            if (s6 !== peg$FAILED) {
                                peg$savedPos = s4;
                                s5 = peg$c17(s1, s3, s6);
                                s4 = s5;
                            } else {
                                peg$currPos = s4;
                                s4 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                        }
                        if (s4 === peg$FAILED) {
                            s4 = null;
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 32) {
                                s6 = peg$c15;
                                peg$currPos++;
                            } else {
                                s6 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c16); }
                            }
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseraidType();
                                if (s7 !== peg$FAILED) {
                                    peg$savedPos = s5;
                                    s6 = peg$c18(s1, s3, s4, s7);
                                    s5 = s6;
                                } else {
                                    peg$currPos = s5;
                                    s5 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s5;
                                s5 = peg$FAILED;
                            }
                            if (s5 === peg$FAILED) {
                                s5 = null;
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = [];
                                s7 = peg$currPos;
                                if (input.charCodeAt(peg$currPos) === 32) {
                                    s8 = peg$c15;
                                    peg$currPos++;
                                } else {
                                    s8 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c16); }
                                }
                                if (s8 !== peg$FAILED) {
                                    s9 = peg$parsedevice();
                                    if (s9 !== peg$FAILED) {
                                        peg$savedPos = s7;
                                        s8 = peg$c19(s1, s3, s4, s5, s9);
                                        s7 = s8;
                                    } else {
                                        peg$currPos = s7;
                                        s7 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s7;
                                    s7 = peg$FAILED;
                                }
                                while (s7 !== peg$FAILED) {
                                    s6.push(s7);
                                    s7 = peg$currPos;
                                    if (input.charCodeAt(peg$currPos) === 32) {
                                        s8 = peg$c15;
                                        peg$currPos++;
                                    } else {
                                        s8 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c16); }
                                    }
                                    if (s8 !== peg$FAILED) {
                                        s9 = peg$parsedevice();
                                        if (s9 !== peg$FAILED) {
                                            peg$savedPos = s7;
                                            s8 = peg$c19(s1, s3, s4, s5, s9);
                                            s7 = s8;
                                        } else {
                                            peg$currPos = s7;
                                            s7 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s7;
                                        s7 = peg$FAILED;
                                    }
                                }
                                if (s6 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c20(s1, s3, s4, s5, s6);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }

            return s0;
        }

        function peg$parsestate() {
            var s0;

            if (input.substr(peg$currPos, 6) === peg$c21) {
                s0 = peg$c21;
                peg$currPos += 6;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c22); }
            }
            if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 8) === peg$c23) {
                    s0 = peg$c23;
                    peg$currPos += 8;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c24); }
                }
            }

            return s0;
        }

        function peg$parseaccess() {
            var s0, s1;

            s0 = peg$currPos;
            if (input.substr(peg$currPos, 16) === peg$c25) {
                s1 = peg$c25;
                peg$currPos += 16;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c26); }
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c27();
            }
            s0 = s1;

            return s0;
        }

        function peg$parsedevice() {
            var s0, s1, s2, s3, s4, s5;

            s0 = peg$currPos;
            s1 = peg$parselinuxDevice();
            if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 91) {
                    s2 = peg$c3;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c4); }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseinteger();
                    if (s3 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 93) {
                            s4 = peg$c28;
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c29); }
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parsedeviceStatus();
                            if (s5 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c30(s1, s3, s5);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }

            return s0;
        }

        function peg$parsedeviceStatus() {
            var s0, s1, s2, s3, s4;

            s0 = peg$currPos;
            s1 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 40) {
                s2 = peg$c31;
                peg$currPos++;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c32); }
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$parsedeviceStatusIdentifier();
                if (s3 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                        s4 = peg$c33;
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c34); }
                    }
                    if (s4 !== peg$FAILED) {
                        peg$savedPos = s1;
                        s2 = peg$c35(s3);
                        s1 = s2;
                    } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
            } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
            }
            if (s1 === peg$FAILED) {
                s1 = null;
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c36(s1);
            }
            s0 = s1;

            return s0;
        }

        function peg$parsedeviceStatusIdentifier() {
            var s0;

            if (input.charCodeAt(peg$currPos) === 70) {
                s0 = peg$c37;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c38); }
            }
            if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 83) {
                    s0 = peg$c39;
                    peg$currPos++;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c40); }
                }
                if (s0 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 82) {
                        s0 = peg$c41;
                        peg$currPos++;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c42); }
                    }
                }
            }

            return s0;
        }

        function peg$parsesecondLine() {
            var s0, s1, s2, s3, s4, s5;

            s0 = peg$currPos;
            s1 = peg$parseinteger();
            if (s1 !== peg$FAILED) {
                if (input.substr(peg$currPos, 8) === peg$c43) {
                    s2 = peg$c43;
                    peg$currPos += 8;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c44); }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$currPos;
                    s4 = [];
                    if (peg$c45.test(input.charAt(peg$currPos))) {
                        s5 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c46); }
                    }
                    while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        if (peg$c45.test(input.charAt(peg$currPos))) {
                            s5 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c46); }
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        s3 = input.substring(s3, peg$currPos);
                    } else {
                        s3 = s4;
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsedevicePosition();
                        if (s4 === peg$FAILED) {
                            s4 = null;
                        }
                        if (s4 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c47(s1, s3, s4);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }

            return s0;
        }

        function peg$parsedevicePosition() {
            var s0, s1, s2, s3, s4, s5, s6, s7;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 91) {
                s1 = peg$c3;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c4); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parseinteger();
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 47) {
                        s3 = peg$c48;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c49); }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parseinteger();
                        if (s4 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 3) === peg$c50) {
                                s5 = peg$c50;
                                peg$currPos += 3;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c51); }
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = [];
                                if (peg$c52.test(input.charAt(peg$currPos))) {
                                    s7 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                } else {
                                    s7 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c53); }
                                }
                                while (s7 !== peg$FAILED) {
                                    s6.push(s7);
                                    if (peg$c52.test(input.charAt(peg$currPos))) {
                                        s7 = input.charAt(peg$currPos);
                                        peg$currPos++;
                                    } else {
                                        s7 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c53); }
                                    }
                                }
                                if (s6 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 93) {
                                        s7 = peg$c28;
                                        peg$currPos++;
                                    } else {
                                        s7 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c29); }
                                    }
                                    if (s7 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c54(s2, s4);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }

            return s0;
        }

        function peg$parseoptionLine() {
            var s0;

            s0 = peg$parsebitmap();
            if (s0 === peg$FAILED) {
                s0 = peg$parseactivity();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseunknown();
                }
            }

            return s0;
        }

        function peg$parsebitmap() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

            s0 = peg$currPos;
            if (input.substr(peg$currPos, 8) === peg$c55) {
                s1 = peg$c55;
                peg$currPos += 8;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c56); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parseinteger();
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 47) {
                        s3 = peg$c48;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c49); }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parseinteger();
                        if (s4 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 8) === peg$c57) {
                                s5 = peg$c57;
                                peg$currPos += 8;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c58); }
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parseinteger();
                                if (s6 !== peg$FAILED) {
                                    if (input.substr(peg$currPos, 5) === peg$c59) {
                                        s7 = peg$c59;
                                        peg$currPos += 5;
                                    } else {
                                        s7 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c60); }
                                    }
                                    if (s7 !== peg$FAILED) {
                                        s8 = peg$parseinteger();
                                        if (s8 !== peg$FAILED) {
                                            if (input.substr(peg$currPos, 8) === peg$c61) {
                                                s9 = peg$c61;
                                                peg$currPos += 8;
                                            } else {
                                                s9 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c62); }
                                            }
                                            if (s9 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$c63(s2, s4, s6, s8);
                                                s0 = s1;
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }

            return s0;
        }

        function peg$parseactivity() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 91) {
                s1 = peg$c3;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c4); }
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                if (peg$c64.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c65); }
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    if (peg$c64.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c65); }
                    }
                }
                if (s2 !== peg$FAILED) {
                    if (peg$c66.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c67); }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = [];
                        if (peg$c68.test(input.charAt(peg$currPos))) {
                            s5 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c69); }
                        }
                        while (s5 !== peg$FAILED) {
                            s4.push(s5);
                            if (peg$c68.test(input.charAt(peg$currPos))) {
                                s5 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c69); }
                            }
                        }
                        if (s4 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 3) === peg$c70) {
                                s5 = peg$c70;
                                peg$currPos += 3;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c71); }
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parseactivityType();
                                if (s6 !== peg$FAILED) {
                                    if (input.substr(peg$currPos, 2) === peg$c72) {
                                        s7 = peg$c72;
                                        peg$currPos += 2;
                                    } else {
                                        s7 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c73); }
                                    }
                                    if (s7 !== peg$FAILED) {
                                        s8 = peg$parsewhitespace();
                                        if (s8 !== peg$FAILED) {
                                            s9 = peg$parsefloat();
                                            if (s9 !== peg$FAILED) {
                                                if (input.substr(peg$currPos, 2) === peg$c74) {
                                                    s10 = peg$c74;
                                                    peg$currPos += 2;
                                                } else {
                                                    s10 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c75); }
                                                }
                                                if (s10 !== peg$FAILED) {
                                                    if (input.charCodeAt(peg$currPos) === 40) {
                                                        s11 = peg$c31;
                                                        peg$currPos++;
                                                    } else {
                                                        s11 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c32); }
                                                    }
                                                    if (s11 !== peg$FAILED) {
                                                        s12 = peg$parseinteger();
                                                        if (s12 !== peg$FAILED) {
                                                            if (input.charCodeAt(peg$currPos) === 47) {
                                                                s13 = peg$c48;
                                                                peg$currPos++;
                                                            } else {
                                                                s13 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c49); }
                                                            }
                                                            if (s13 !== peg$FAILED) {
                                                                s14 = peg$parseinteger();
                                                                if (s14 !== peg$FAILED) {
                                                                    if (input.substr(peg$currPos, 2) === peg$c76) {
                                                                        s15 = peg$c76;
                                                                        peg$currPos += 2;
                                                                    } else {
                                                                        s15 = peg$FAILED;
                                                                        if (peg$silentFails === 0) { peg$fail(peg$c77); }
                                                                    }
                                                                    if (s15 !== peg$FAILED) {
                                                                        if (input.substr(peg$currPos, 7) === peg$c78) {
                                                                            s16 = peg$c78;
                                                                            peg$currPos += 7;
                                                                        } else {
                                                                            s16 = peg$FAILED;
                                                                            if (peg$silentFails === 0) { peg$fail(peg$c79); }
                                                                        }
                                                                        if (s16 !== peg$FAILED) {
                                                                            s17 = peg$parsefloat();
                                                                            if (s17 !== peg$FAILED) {
                                                                                if (input.substr(peg$currPos, 4) === peg$c80) {
                                                                                    s18 = peg$c80;
                                                                                    peg$currPos += 4;
                                                                                } else {
                                                                                    s18 = peg$FAILED;
                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c81); }
                                                                                }
                                                                                if (s18 !== peg$FAILED) {
                                                                                    if (input.substr(peg$currPos, 6) === peg$c82) {
                                                                                        s19 = peg$c82;
                                                                                        peg$currPos += 6;
                                                                                    } else {
                                                                                        s19 = peg$FAILED;
                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c83); }
                                                                                    }
                                                                                    if (s19 !== peg$FAILED) {
                                                                                        s20 = peg$parseinteger();
                                                                                        if (s20 !== peg$FAILED) {
                                                                                            if (input.substr(peg$currPos, 5) === peg$c84) {
                                                                                                s21 = peg$c84;
                                                                                                peg$currPos += 5;
                                                                                            } else {
                                                                                                s21 = peg$FAILED;
                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c85); }
                                                                                            }
                                                                                            if (s21 !== peg$FAILED) {
                                                                                                peg$savedPos = s0;
                                                                                                s1 = peg$c86(s6, s9, s12, s14, s17, s20);
                                                                                                s0 = s1;
                                                                                            } else {
                                                                                                peg$currPos = s0;
                                                                                                s0 = peg$FAILED;
                                                                                            }
                                                                                        } else {
                                                                                            peg$currPos = s0;
                                                                                            s0 = peg$FAILED;
                                                                                        }
                                                                                    } else {
                                                                                        peg$currPos = s0;
                                                                                        s0 = peg$FAILED;
                                                                                    }
                                                                                } else {
                                                                                    peg$currPos = s0;
                                                                                    s0 = peg$FAILED;
                                                                                }
                                                                            } else {
                                                                                peg$currPos = s0;
                                                                                s0 = peg$FAILED;
                                                                            }
                                                                        } else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$FAILED;
                                                                        }
                                                                    } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$FAILED;
                                                                    }
                                                                } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                }
                                                            } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                            }
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }

            return s0;
        }

        function peg$parseactivityType() {
            var s0;

            if (input.substr(peg$currPos, 8) === peg$c87) {
                s0 = peg$c87;
                peg$currPos += 8;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c88); }
            }
            if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c89) {
                    s0 = peg$c89;
                    peg$currPos += 6;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c90); }
                }
            }

            return s0;
        }

        function peg$parseunknown() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            s1 = peg$currPos;
            s2 = [];
            if (peg$c91.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c92); }
            }
            if (s3 !== peg$FAILED) {
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    if (peg$c91.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c92); }
                    }
                }
            } else {
                s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
                s1 = input.substring(s1, peg$currPos);
            } else {
                s1 = s2;
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c93(s1);
            }
            s0 = s1;

            return s0;
        }

        function peg$parseunused() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            if (input.substr(peg$currPos, 16) === peg$c94) {
                s1 = peg$c94;
                peg$currPos += 16;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c95); }
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                if (peg$c91.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c92); }
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    if (peg$c91.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c92); }
                    }
                }
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 10) {
                        s3 = peg$c8;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c9); }
                    }
                    if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c96();
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }

            return s0;
        }

        function peg$parselinuxDevice() {
            var s0, s1, s2, s3, s4;

            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$currPos;
            s2 = peg$parseprefix();
            if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$parseinteger();
                while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    s4 = peg$parseinteger();
                }
                if (s3 !== peg$FAILED) {
                    s2 = [s2, s3];
                    s1 = s2;
                } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
            } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
                s0 = input.substring(s0, peg$currPos);
            } else {
                s0 = s1;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c97); }
            }

            return s0;
        }

        function peg$parseprefix() {
            var s0, s1, s2, s3, s4, s5, s6, s7;

            s0 = peg$currPos;
            s1 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c98) {
                s2 = peg$c98;
                peg$currPos += 2;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c99); }
            }
            if (s2 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c100) {
                    s2 = peg$c100;
                    peg$currPos += 2;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c101); }
                }
            }
            if (s2 !== peg$FAILED) {
                if (peg$c102.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c103); }
                }
                if (s3 !== peg$FAILED) {
                    s2 = [s2, s3];
                    s1 = s2;
                } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
            } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
                s0 = input.substring(s0, peg$currPos);
            } else {
                s0 = s1;
            }
            if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c104) {
                    s0 = peg$c104;
                    peg$currPos += 2;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c105); }
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c106) {
                        s0 = peg$c106;
                        peg$currPos += 2;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c107); }
                    }
                    if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c108) {
                            s0 = peg$c108;
                            peg$currPos += 2;
                        } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c109); }
                        }
                        if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c110) {
                                s0 = peg$c110;
                                peg$currPos += 2;
                            } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c111); }
                            }
                            if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$currPos;
                                if (input.substr(peg$currPos, 4) === peg$c112) {
                                    s2 = peg$c112;
                                    peg$currPos += 4;
                                } else {
                                    s2 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c113); }
                                }
                                if (s2 !== peg$FAILED) {
                                    s3 = peg$parseinteger();
                                    if (s3 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 110) {
                                            s4 = peg$c114;
                                            peg$currPos++;
                                        } else {
                                            s4 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c115); }
                                        }
                                        if (s4 !== peg$FAILED) {
                                            s5 = peg$parseinteger();
                                            if (s5 !== peg$FAILED) {
                                                s6 = [];
                                                if (input.charCodeAt(peg$currPos) === 112) {
                                                    s7 = peg$c116;
                                                    peg$currPos++;
                                                } else {
                                                    s7 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c117); }
                                                }
                                                while (s7 !== peg$FAILED) {
                                                    s6.push(s7);
                                                    if (input.charCodeAt(peg$currPos) === 112) {
                                                        s7 = peg$c116;
                                                        peg$currPos++;
                                                    } else {
                                                        s7 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c117); }
                                                    }
                                                }
                                                if (s6 !== peg$FAILED) {
                                                    s2 = [s2, s3, s4, s5, s6];
                                                    s1 = s2;
                                                } else {
                                                    peg$currPos = s1;
                                                    s1 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s1;
                                                s1 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s1;
                                            s1 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s1;
                                        s1 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s1;
                                    s1 = peg$FAILED;
                                }
                                if (s1 !== peg$FAILED) {
                                    s0 = input.substring(s0, peg$currPos);
                                } else {
                                    s0 = s1;
                                }
                                if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = peg$currPos;
                                    if (input.substr(peg$currPos, 6) === peg$c118) {
                                        s2 = peg$c118;
                                        peg$currPos += 6;
                                    } else {
                                        s2 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c119); }
                                    }
                                    if (s2 !== peg$FAILED) {
                                        s3 = peg$parseinteger();
                                        if (s3 !== peg$FAILED) {
                                            s4 = [];
                                            if (input.charCodeAt(peg$currPos) === 112) {
                                                s5 = peg$c116;
                                                peg$currPos++;
                                            } else {
                                                s5 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c117); }
                                            }
                                            while (s5 !== peg$FAILED) {
                                                s4.push(s5);
                                                if (input.charCodeAt(peg$currPos) === 112) {
                                                    s5 = peg$c116;
                                                    peg$currPos++;
                                                } else {
                                                    s5 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c117); }
                                                }
                                            }
                                            if (s4 !== peg$FAILED) {
                                                s2 = [s2, s3, s4];
                                                s1 = s2;
                                            } else {
                                                peg$currPos = s1;
                                                s1 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s1;
                                            s1 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s1;
                                        s1 = peg$FAILED;
                                    }
                                    if (s1 !== peg$FAILED) {
                                        s0 = input.substring(s0, peg$currPos);
                                    } else {
                                        s0 = s1;
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return s0;
        }

        function peg$parseraidType() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            s1 = peg$currPos;
            if (input.substr(peg$currPos, 4) === peg$c120) {
                s2 = peg$c120;
                peg$currPos += 4;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c121); }
            }
            if (s2 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c122) {
                    s3 = peg$c122;
                    peg$currPos += 2;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c123); }
                }
                if (s3 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 48) {
                        s3 = peg$c124;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c125); }
                    }
                    if (s3 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 49) {
                            s3 = peg$c126;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c127); }
                        }
                        if (s3 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 50) {
                                s3 = peg$c128;
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c129); }
                            }
                            if (s3 === peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 52) {
                                    s3 = peg$c130;
                                    peg$currPos++;
                                } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c131); }
                                }
                                if (s3 === peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 53) {
                                        s3 = peg$c132;
                                        peg$currPos++;
                                    } else {
                                        s3 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c133); }
                                    }
                                    if (s3 === peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 54) {
                                            s3 = peg$c134;
                                            peg$currPos++;
                                        } else {
                                            s3 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c135); }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (s3 !== peg$FAILED) {
                    s2 = [s2, s3];
                    s1 = s2;
                } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
            } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
                s0 = input.substring(s0, peg$currPos);
            } else {
                s0 = s1;
            }
            if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c136) {
                    s0 = peg$c136;
                    peg$currPos += 6;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c137); }
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 9) === peg$c138) {
                        s0 = peg$c138;
                        peg$currPos += 9;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c139); }
                    }
                }
            }

            return s0;
        }

        function peg$parseinteger() {
            var s0, s1, s2, s3;

            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$currPos;
            s2 = [];
            if (peg$c141.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c142); }
            }
            if (s3 !== peg$FAILED) {
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    if (peg$c141.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c142); }
                    }
                }
            } else {
                s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
                s1 = input.substring(s1, peg$currPos);
            } else {
                s1 = s2;
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c143(s1);
            }
            s0 = s1;
            peg$silentFails--;
            if (s0 === peg$FAILED) {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c140); }
            }

            return s0;
        }

        function peg$parsefloat() {
            var s0, s1, s2, s3;

            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$currPos;
            s2 = [];
            if (peg$c145.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c146); }
            }
            if (s3 !== peg$FAILED) {
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    if (peg$c145.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c146); }
                    }
                }
            } else {
                s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
                s1 = input.substring(s1, peg$currPos);
            } else {
                s1 = s2;
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c147(s1);
            }
            s0 = s1;
            peg$silentFails--;
            if (s0 === peg$FAILED) {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c144); }
            }

            return s0;
        }

        function peg$parsewhitespace() {
            var s0, s1, s2;

            peg$silentFails++;
            s0 = peg$currPos;
            s1 = [];
            if (peg$c149.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c150); }
            }
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                if (peg$c149.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c150); }
                }
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c151();
            }
            s0 = s1;
            peg$silentFails--;
            if (s0 === peg$FAILED) {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c148); }
            }

            return s0;
        }


        function concatObjects() {
            var result = {};
            for (var element of arguments)
                for (var name in element)
                    result[name] = element[name];
            return result;
        }


        peg$result = peg$startRuleFunction();

        if (peg$result !== peg$FAILED && peg$currPos === input.length) {
            return peg$result;
        } else {
            if (peg$result !== peg$FAILED && peg$currPos < input.length) {
                peg$fail(peg$endExpectation());
            }

            throw peg$buildStructuredError(
                peg$maxFailExpected,
                peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
                peg$maxFailPos < input.length
                    ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
                    : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
            );
        }
    }

    return {
        SyntaxError: peg$SyntaxError,
        parse:       peg$parse
    };
})();
